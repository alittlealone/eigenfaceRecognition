
// MfcOpencvAttDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "MfcOpencvAtt.h"
#include "MfcOpencvAttDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CMfcOpencvAttDlg 对话框



CMfcOpencvAttDlg::CMfcOpencvAttDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CMfcOpencvAttDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CMfcOpencvAttDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_TEST_STATIC, m_testPicture);
	DDX_Control(pDX, IDC_SHOW_STATIC, m_showPicture);
}

BEGIN_MESSAGE_MAP(CMfcOpencvAttDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_CHOOSE_BUTTON, &CMfcOpencvAttDlg::OnBnClickedChooseButton)
	ON_BN_CLICKED(IDC_START_BUTTON, &CMfcOpencvAttDlg::OnBnClickedStartButton)
	ON_STN_CLICKED(IDC_SHOW_STATIC, &CMfcOpencvAttDlg::OnStnClickedShowStatic)
END_MESSAGE_MAP()


// CMfcOpencvAttDlg 消息处理程序

BOOL CMfcOpencvAttDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO:  在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CMfcOpencvAttDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CMfcOpencvAttDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CMfcOpencvAttDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CMfcOpencvAttDlg::OnBnClickedChooseButton()
{
	// TODO:  在此添加控件通知处理程序代码
	// 设置过滤器   
	TCHAR szFilter[] = _T("图像文件(*.bmp)|*.bmp|所有文件(*.*)|*.*||");
	// 构造打开文件对话框   
	CFileDialog fileDlg(TRUE, _T("bmp"), NULL, 0, szFilter, this);
	CString strFilePath;
 
	HBITMAP hBmp;    // 保存CBitmap加载的位图的句柄

	// 显示打开文件对话框   
	if (IDOK == fileDlg.DoModal())
	{
		// 如果点击了文件对话框上的“打开”按钮，则将图片显示在对话框中  
		strFilePath = fileDlg.GetPathName();
		//LoadBitMap不能导入外部图像，必须用LoadImage
		hBmp = (HBITMAP)LoadImage(NULL, strFilePath, IMAGE_BITMAP,
			0, 0, LR_CREATEDIBSECTION | LR_DEFAULTSIZE | LR_LOADFROMFILE); 
		m_testPicture.SetBitmap(hBmp);    // 设置图片控件m_testPicture的位图图片为IDB_BITMAP1 

		UpdateWindow();
	}

}


int identify()
{
	return 5;
}

void CMfcOpencvAttDlg::OnBnClickedStartButton()
{
	// TODO:  在此添加控件通知处理程序代码
	CString result;
	result.Format(_T("%d"), identify());

	SetDlgItemText(IDC_RESULT_EDIT1, result);

	/*CString imagePath = _T("C:\\Users\\Administrator\\Desktop\\ATT\\s");
	imagePath += result + _T("\\1.bmp");*/
	CString imagePath = _T("./res/1.bmp");
	HBITMAP hBmp = (HBITMAP)LoadImage(NULL, imagePath, IMAGE_BITMAP,
		0, 0, LR_CREATEDIBSECTION | LR_DEFAULTSIZE | LR_LOADFROMFILE);
	m_showPicture.SetBitmap(hBmp);    // 设置图片控件m_testPicture的位图图片为IDB_BITMAP1

	UpdateWindow();
}

